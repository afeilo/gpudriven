// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel Blit
#pragma kernel BlitMip
#pragma multi_compile _ _REVERSED_Z
// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture2D<float4> _HizMapTexure;
Texture2D<float4> _InTexture; //输入
RWTexture2D<float4> _OutTexture; //输出 作为下一次的输入

uniform float2 _SrcSize;
uniform float2 _DstSize;

[numthreads(8,8,1)]
void Blit(uint3 id : SV_DispatchThreadID)
{
    if (id.x >= _DstSize.x || id.y >= _DstSize.y)
        return;
    uint2 src_coord = floor(id.xy * _SrcSize.xy / _DstSize.xy);
    _HizMapTexure[id.xy] = _InTexture[src_coord];
    _OutTexture[id.xy] = _HizMapTexure[id.xy];
}

[numthreads(8,8,1)]
void BlitMip(uint3 id : SV_DispatchThreadID)
{
    if (id.x >= _DstSize.x || id.y >= _DstSize.y)
        return;

    uint2 coord = 2 * id.xy;
    float d1 = _InTexture[coord + uint2(0, 0)];
    float d2 = _InTexture[coord + uint2(1, 0)];
    float d3 = _InTexture[coord + uint2(0, 1)];
    float d4 = _InTexture[coord + uint2(1, 1)];

    #if _REVERSED_Z
        float d = min(min(d1, d2), min(d3, d4));
    #else
        float d = max(max(d1, d2), max(d3, d4));
    #endif
    _HizMapTexure[id.xy] = d;
    _OutTexture[id.xy] = d;
}
